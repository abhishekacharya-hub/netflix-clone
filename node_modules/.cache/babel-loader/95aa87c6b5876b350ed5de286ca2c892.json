{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abhishek\\\\Desktop\\\\netflix clone\\\\src\\\\Row\\\\Row.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from '../axios';\nimport './Row.css';\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nconst base_url = 'https://image.tmdb.org/t/p/original/';\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  useEffect(() => {\n    // if empty [], run once when the row loads and doesnt run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); //console.log(request);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData(); // Tell useEffect that we use this dependencies\n  }, [fetchUrl]); //console.log(movies);\n\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        // https://www.youtube.com/watch?v=XtMThy8QKqU <-- will only get the value at the end\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(\"img\", {\n    key: movie.id,\n    onClick: () => handleClick(movie),\n    className: `row_poster ${isLargeRow && 'row_posterLarge'}`,\n    src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n    alt: movie.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }))), trailerUrl && /*#__PURE__*/React.createElement(Youtube, {\n    videoId: trailerUrl,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 28\n    }\n  }));\n}\n\nexport default Row;","map":{"version":3,"sources":["C:/Users/Abhishek/Desktop/netflix clone/src/Row/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","id","poster_path","backdrop_path"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAc;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAd,EAA6C;AAEzC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,mBAAea,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB,CADuB,CAEvB;;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS,GARG,CASZ;AACH,GAVQ,EAUN,CAACN,QAAD,CAVM,CAAT,CALyC,CAiBzC;;AAEA,QAAMW,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACR;AACAC,MAAAA,QAAQ,EAAE;AAFF;AAHH,GAAb;;AASA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAIb,UAAJ,EAAgB;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEO;AACHT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACKC,IADL,CACUC,GAAG,IAAI;AACT;AACA,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAnB,QAAAA,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;AACH,OALL,EAMKiB,KANL,CAMWC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANpB;AAOH;AACJ,GAZD;;AAcA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK3B,KAAL,CADJ,eAGI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKG,MAAM,CAAC2B,GAAP,CAAYZ,KAAD,iBACR;AAAK,IAAA,GAAG,EAAEA,KAAK,CAACa,EAAhB;AACK,IAAA,OAAO,EAAE,MAAMd,WAAW,CAACC,KAAD,CAD/B;AAEK,IAAA,SAAS,EAAG,cAAahB,UAAU,IAAI,iBAAkB,EAF9D;AAGK,IAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGgB,KAAK,CAACc,WAAT,GAAuBd,KAAK,CAACe,aAAc,EAH7E;AAIK,IAAA,GAAG,EAAEf,KAAK,CAACC,IAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAHL,CAHJ,EAcKd,UAAU,iBAAI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,UAAlB;AAA8B,IAAA,IAAI,EAAEO,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdnB,CADJ;AAkBH;;AAED,eAAeb,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from '../axios';\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Row ({title, fetchUrl, isLargeRow}) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        // if empty [], run once when the row loads and doesnt run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            //console.log(request);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n        // Tell useEffect that we use this dependencies\r\n    }, [fetchUrl]);\r\n\r\n    //console.log(movies);\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n                .then(url => {\r\n                    // https://www.youtube.com/watch?v=XtMThy8QKqU <-- will only get the value at the end\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n                {/* row_posters */}\r\n                {/* container -> posters */}\r\n                {movies.map((movie) => (\r\n                    <img key={movie.id}\r\n                         onClick={() => handleClick(movie)}\r\n                         className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\r\n                         src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                         alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;"]},"metadata":{},"sourceType":"module"}