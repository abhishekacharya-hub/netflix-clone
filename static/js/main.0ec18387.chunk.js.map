{"version":3,"sources":["requests.js","axios.js","Row/Row.js","Banner/Banner.js","Nav/Nav.js","App/App.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchNetflixOriginals","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4SAAMA,G,YAAU,oCAaDC,EAXE,CACbC,sBAAsB,wBAAD,OAA0BF,EAA1B,sBACrBG,cAAc,6BAAD,OAA+BH,GAC5CI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,sCCHPU,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iC,iCCkEEC,MA9Df,YAA8C,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,WAAa,EAEbC,mBAAS,IAFI,mBAElCC,EAFkC,KAE1BC,EAF0B,OAGLF,mBAAS,IAHJ,mBAGlCG,EAHkC,KAGtBC,EAHsB,KA0CzC,OArCAC,qBAAU,WAAM,4CAEZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIT,GADpC,cACUU,EADV,OAGIN,EAAUM,EAAQC,KAAKC,SAH3B,kBAIWF,GAJX,4CAFY,0DAQZG,KAED,CAACb,IA4BA,yBAAKc,UAAU,OACX,4BAAKf,GAEL,yBAAKe,UAAU,eAGVX,EAAOY,KAAI,SAACC,GAAD,OACR,yBAAKC,IAAKD,EAAME,GACXC,QAAS,kBAvBV,SAACH,GACbX,EACAC,EAAc,IAEdc,KAAkB,OAALJ,QAAK,IAALA,OAAA,EAAAA,EAAOK,OAAQ,IACvBC,MAAK,SAAAC,GAEF,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDrB,EAAckB,EAAUf,IAAI,SAE/BmB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAaJG,CAAYhB,IAC3BF,UAAS,qBAAgBb,GAAc,mBACvCgC,IAAG,UAvDX,wCAuDW,OAAgBhC,EAAae,EAAMkB,YAAclB,EAAMmB,eAC1DC,IAAKpB,EAAMK,WAGvBhB,GAAc,kBAAC,IAAD,CAASgC,QAAShC,EAAYiC,KAtCxC,CACTC,OAAQ,MACRC,MAAO,OACPC,WAAY,CAERC,SAAU,Q,MCcPC,MAzCf,WAAmB,IAgBGC,EAAKC,EAhBT,EACY3C,mBAAS,IADrB,mBACPc,EADO,KACA8B,EADA,KAoBd,OAjBAvC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIxB,EAASC,uBAD7C,cACUwB,EADV,OAEIoC,EAASpC,EAAQC,KAAKC,QAClBmC,KAAKC,MAAMD,KAAKE,SAAWvC,EAAQC,KAAKC,QAAQsC,OAAQ,KAHhE,kBAMWxC,GANX,4CADY,uBAAC,WAAD,wBASZG,KACD,IAQC,4BAAQC,UAAU,SACVqC,MAAO,CAACC,eAAe,QACnBC,gBAAgB,2CAAD,cAA4CrC,QAA5C,IAA4CA,OAA5C,EAA4CA,EAAOmB,cAAnD,KACfmB,mBAAmB,kBAH/B,IAII,yBAAKxC,UAAU,mBAEX,wBAAIA,UAAU,iBAAqB,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOjB,SAAP,OAAgBiB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOK,QAAvB,OAA+BL,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOuC,gBAEpE,yBAAKzC,UAAU,kBACX,4BAAQA,UAAU,iBAAlB,QACA,4BAAQA,UAAU,iBAAlB,YAGJ,wBAAIA,UAAU,uBAlBR8B,EAkBsC,OAAC5B,QAAD,IAACA,OAAD,EAACA,EAAOwC,SAlBzCX,EAkBmD,KAjB5D,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAID,EAAIa,OAAO,EAAGZ,EAAI,GAAK,MAAQD,KAmBpD,yBAAK9B,UAAU,sBAfnB,M,MCIO4C,MA3Bf,WAAgB,IAAD,EAEgBxD,oBAAS,GAFzB,mBAEJyD,EAFI,KAEEC,EAFF,KAeX,OAXArD,qBAAU,WAMN,OALAsD,OAAOC,iBAAiB,UAAU,WAC1BD,OAAOE,QAAU,IACjBH,GAAW,GACRA,GAAW,MAEf,WACHC,OAAOG,oBAAoB,aAEhC,IAGC,yBAAKlD,UAAS,cAAS6C,GAAQ,cAE3B,yBAAK7C,UAAU,WAAWmB,IAAI,4BAA4BG,IAAI,mBCO3D6B,MArBf,WACE,OACE,yBAAKnD,UAAU,OAEb,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEE,kBAAC,EAAD,CAAKb,YAAU,EAACF,MAAM,oBAAoBC,SAAUf,EAASC,wBAE7D,kBAAC,EAAD,CAAKa,MAAM,eAAeC,SAAUf,EAASE,gBAC7C,kBAAC,EAAD,CAAKY,MAAM,YAAYC,SAAUf,EAASG,gBAC1C,kBAAC,EAAD,CAAKW,MAAM,gBAAgBC,SAAUf,EAASI,oBAC9C,kBAAC,EAAD,CAAKU,MAAM,gBAAgBC,SAAUf,EAASK,oBAC9C,kBAAC,EAAD,CAAKS,MAAM,gBAAgBC,SAAUf,EAASM,oBAC9C,kBAAC,EAAD,CAAKQ,MAAM,iBAAiBC,SAAUf,EAASO,qBAC/C,kBAAC,EAAD,CAAKO,MAAM,gBAAgBC,SAAUf,EAASQ,uBCXlCyE,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdnD,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMmD,c","file":"static/js/main.0ec18387.chunk.js","sourcesContent":["const API_KEY = \"b1711f35ef1165c239e88da7934667be\";\r\n\r\nconst requests = {\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTrending: `/trending/all/day?api_key=${API_KEY}`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default requests;","import axios from \"axios\";\r\n\r\n/* base url to make request */\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport axios from '../axios';\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Row ({title, fetchUrl, isLargeRow}) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        // if empty [], run once when the row loads and doesnt run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            //console.log(request);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n        // Tell useEffect that we use this dependencies\r\n    }, [fetchUrl]);\r\n\r\n    //console.log(movies);\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n                .then(url => {\r\n                    // https://www.youtube.com/watch?v=XtMThy8QKqU <-- will only get the value at the end\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                })\r\n                .catch(error => console.log(error))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n                {/* row_posters */}\r\n                {/* container -> posters */}\r\n                {movies.map((movie) => (\r\n                    <img key={movie.id}\r\n                         onClick={() => handleClick(movie)}\r\n                         className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\r\n                         src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                         alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;","import React, {useEffect, useState} from 'react';\r\nimport axios from '../axios';\r\nimport requests from \"../requests\";\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[ // This pick a random movie to display on the banner\r\n                Math.floor(Math.random() * request.data.results.length -1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n    //console.log(movie)\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n                style={{backgroundSize:'cover',\r\n                    backgroundImage:`url(https://image.tmdb.org/t/p/original/${movie?.backdrop_path})`,\r\n                    backgroundPosition:'center center'}}> {/* <-- Background Image */}\r\n            <div className=\"banner_contents\">\r\n                {/* Title */}\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                {/* div > 2 buttons */}\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                {/* Description */}\r\n                <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n            <div className=\"banner-fadeBottom\"></div> {/* <-- This add a fade at the bottom of the banner content */}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true)\r\n            } else handleShow(false)\r\n        });\r\n        return () => {\r\n            window.removeEventListener('scroll')\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            {/* Netflix logo */}\r\n            <img className=\"nav_logo\" src=\"./images/Netflix-logo.png\" alt=\"Netflix logo\"/>\r\n\r\n            {/* Avatar logo */}\r\n            {/*<img className=\"nav_avatar\" src=\"./images/netflix-avatar.png\" alt=\"Netflix avatar\"/>*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\r\nimport './App.css';\r\nimport requests from \"../requests\";\r\nimport Row from '../Row/Row';\r\nimport Banner from '../Banner/Banner';\r\nimport Nav from \"../Nav/Nav\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      {/* Navbar */}\r\n      <Nav />\r\n      {/* Banner */}\r\n      <Banner />\r\n      {/* Row */}\r\n        <Row isLargeRow title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} />\r\n\r\n        <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n        <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n        <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n        <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n        <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n        <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n        <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}